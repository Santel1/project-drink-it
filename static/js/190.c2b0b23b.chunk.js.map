{"version":3,"file":"static/js/190.c2b0b23b.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/SignUpForm/SignUp.styled.js","components/SignUpForm/SignUp.jsx","page/RegistrationPage.styled.js","page/RegistrationPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const SectionWrapper = styled.section``;\n","import { SectionWrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionWrapper>\n      <h2>{title}</h2>\n      {children}\n    </SectionWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SignupForm = styled.form`\n  @media screen and (min-width: 320px) {\n    display: flex;\n    flex-direction: column;\n    max-width: 280px;\n    h3 {\n      color: var(--primery-color-black);\n      font-size: 26px;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 1.2;\n\n      margin-bottom: 16px;\n    }\n    label {\n      color: var(--primery-color-black);\n      font-size: 18px;\n      line-height: 1.3;\n\n      margin-bottom: 8px;\n    }\n    div {\n      display: flex;\n      flex-direction: column;\n      margin-bottom: 16px;\n    }\n    .password-wrapper {\n      display: flex;\n      align-items: center;\n      flex-direction: row;\n      justify-content: space-between;\n\n      padding: 12px 10px;\n      margin: 0;\n\n      border-radius: 6px;\n      background: var(--primery-color-white);\n    }\n    input {\n      border: none;\n      width: 234px;\n\n      color: var(--primery-color-blue);\n      line-height: 1.2;\n    }\n    input:focus {\n      color: var(--primery-color-blue);\n      font-size: 16px;\n      line-height: 1.2;\n\n      outline: none;\n    }\n    input::placeholder {\n      color: var(--secondary-color-blue);\n      font-size: 16px;\n      line-height: 1.2;\n    }\n    .eye-icon {\n      cursor: pointer;\n      margin: 0;\n    }\n    svg {\n      fill: var(--primery-color-blue);\n    }\n    button {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 10px;\n      padding: 8px 30px;\n\n      border: none;\n      border-radius: 10px;\n      background: var(--primery-color-blue);\n      box-shadow: 0px 4px 8px 0px rgba(64, 123, 255, 0.34);\n\n      color: var(--primery-color-white);\n      line-height: 1.2;\n      font-weight: 500;\n\n      margin-bottom: 16px;\n    }\n    button:active {\n      box-shadow: none;\n    }\n    button:hover,\n    button:focus {\n      box-shadow: 0px 4px 14px 0px rgba(64, 123, 255, 0.54);\n    }\n    a {\n      color: var(--primery-color-blue);\n      font-size: 16px;\n      line-height: 1.2;\n    }\n    a:hover,\n    a:focus {\n      color: #ff9d43;\n    }\n  }\n\n  @media screen and (min-width: 768px) {\n    max-width: 336px;\n    input {\n      width: 290px;\n    }\n    button {\n      font-size: 18px;\n      padding: 10px 30px;\n    }\n  }\n\n  @media screen and (min-width: 1440px) {\n    max-width: 384px;\n    input {\n      width: 338px;\n    }\n  }\n`;\nexport const ErrorMessage = styled.span`\n  @media screen and (min-width: 320px) {\n    color: var(--btn-color-red);\n    font-size: 14px;\n    line-height: 1.2;\n\n    margin-top: 8px;\n  }\n`;\n","import React, { useState } from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { NavLink } from \"react-router-dom\";\nimport { SignupForm, ErrorMessage } from \"./SignUp.styled\";\nimport icons from '../../img/icons.svg';\nimport { useDispatch } from \"react-redux\";\nimport { signupThunk } from \"redux/auth/thunk\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst SignUpForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showRepeatedPassword, setShowRepeatedPassword] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().email('Invalid email address').required('Email is required'),\n      password: Yup.string().required('Password is required').min(8, 'Password must be at least 8 characters')\n      .max(64, 'Password must be at most 64 characters'),\n      repeatPassword: Yup.string()\n        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n        .required('Password is required'),\n    }),\n    onSubmit: async (values) => {\n      try {\n        console.log('Form data submitted:', values);\n        dispatch(signupThunk(values));\n        navigate(\"/signin\");\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    },\n  });\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n  const toggleRepeatedPasswordVisibility = () => {\n    setShowRepeatedPassword(!showRepeatedPassword);\n  };\n\n  return (\n    <SignupForm onSubmit={formik.handleSubmit}>\n      <h3>Sign Up</h3>\n      <label>Enter your email</label>\n      <div>\n        <div className=\"password-wrapper\" style={{\n              border: formik.touched.email && formik.errors.email ? '1px solid var(--btn-color-red)' : '1px solid var(--secondary-color-blue)',\n            }}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"E-mail\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.email}\n            style={{\n              color: formik.touched.email && formik.errors.email ? 'var(--btn-color-red)' : 'var(--primery-color-blue)',\n            }}\n          />\n        </div>\n      {formik.touched.email && formik.errors.email ? (\n        <ErrorMessage>{formik.errors.email}</ErrorMessage>\n        ) : null}\n      </div>\n\n      <label>Enter your password</label>\n      <div>\n        <div className=\"password-wrapper\" style={{\n              border: formik.touched.password && formik.errors.password ? '1px solid var(--btn-color-red)' : '1px solid var(--secondary-color-blue)',\n            }}>\n          <input\n            type={showPassword ? 'text' : 'password'}\n            name=\"password\"\n            placeholder=\"Password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.password}\n            style={{\n              color: formik.touched.password && formik.errors.password ? 'var(--btn-color-red)' : 'var(--primery-color-blue)',\n            }}\n            />\n          <div className=\"eye-icon\" onClick={togglePasswordVisibility}>\n            <svg width=\"16\" height=\"16\">\n              <use href={showPassword ? icons + '#icon-opend-eye' : icons + '#icon-closed-eye'}></use>\n            </svg>\n          </div>\n        </div>\n        {formik.touched.password && formik.errors.password ? (\n          <ErrorMessage>{formik.touched.password && formik.errors.password}</ErrorMessage>\n          ) : null}\n      </div>\n\n      <label>Repeat password</label>\n      <div>\n        <div className=\"password-wrapper\" style={{\n              border: formik.touched.password && formik.errors.password ? '1px solid var(--btn-color-red)' : '1px solid var(--secondary-color-blue)',\n        }}>\n          <input\n            type={showRepeatedPassword ? 'text' : 'password'}\n            name=\"repeatPassword\"\n            placeholder=\"Repeat password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.repeatPassword}\n            style={{\n              color: formik.touched.repeatPassword && formik.errors.repeatPassword ? 'var(--btn-color-red)' : 'var(--primery-color-blue)',\n            }}\n          />\n          <div className=\"eye-icon\" onClick={toggleRepeatedPasswordVisibility}>\n            <svg width=\"16\" height=\"16\">\n              <use href={showRepeatedPassword ? icons + '#icon-opend-eye' : icons + '#icon-closed-eye'}></use>\n            </svg>\n          </div>\n        </div>\n        {formik.touched.repeatPassword && formik.errors.repeatPassword ? (\n          <ErrorMessage>{formik.errors.repeatPassword}</ErrorMessage>\n          ) : null}\n      </div>\n\n      <button type=\"submit\">Sign Up</button>\n    <NavLink to=\"/signin\">Sign in</NavLink>\n  </SignupForm>\n  )\n};\n\nexport default SignUpForm;","import styled from 'styled-components';\nimport mobBackground from '../img/background-img-mobile.png';\nimport tabBackground from '../img/background-img-tablet.png';\nimport descBackground from '../img/background-img-desktop.png';\nexport const SignupPage = styled.section`\n  @media screen and (min-width: 320px) {\n    max-width: 280px;\n    padding: 0 20px;\n    margin: 0 auto;\n    height: 600px;\n  }\n  @media screen and (min-width: 768px) {\n    max-width: 336px;\n    margin: 0;\n    padding: 0 0 0 32px;\n  }\n  @media screen and (min-width: 1440px) {\n    max-width: 384px;\n    margin: 0 auto;\n    padding: 60px 216px 0 840px;\n  }\n`;\n\nexport const SignupWrapper = styled.div`\n  @media screen and (max-width: 767px) {\n    background-image: url(${mobBackground});\n    background-repeat: no-repeat;\n    background-size: auto;\n    background-position: center top 27px;\n  }\n\n  @media screen and (min-width: 768px) {\n    position: relative;\n    &::before {\n      content: '';\n      position: absolute;\n      top: -107px;\n      bottom: 0px;\n      left: 0px;\n      right: 0px;\n      background-image: url(${tabBackground});\n      background-repeat: no-repeat;\n      background-size: auto;\n      z-index: -1;\n    }\n  }\n\n  @media screen and (min-width: 1440px) {\n    &::before {\n      top: -126px;\n      background-image: url(${descBackground});\n      background-position: center;\n    }\n  }\n`;\n","import { Section } from 'components/Section/Section';\nimport SignUpForm from 'components/SignUpForm/SignUp';\nimport { SignupPage, SignupWrapper } from './RegistrationPage.styled';\n\nconst RegistrationPage = () => {\n  return (\n    <Section>\n      <SignupWrapper>\n        <SignupPage>\n          <SignUpForm />\n        </SignupPage>\n      </SignupWrapper>\n    </Section>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["SectionWrapper","styled","_templateObject","_taggedTemplateLiteral","Section","_ref","title","children","_jsxs","_jsx","SignupForm","ErrorMessage","_templateObject2","dispatch","useDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","showRepeatedPassword","setShowRepeatedPassword","formik","useFormik","initialValues","email","password","repeatPassword","validationSchema","Yup","required","min","max","oneOf","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","_callee","values","_context","prev","next","console","log","signupThunk","error","stop","_x","apply","arguments","handleSubmit","className","style","border","touched","errors","type","name","placeholder","onChange","handleChange","onBlur","handleBlur","value","color","onClick","width","height","href","icons","NavLink","to","SignupPage","SignupWrapper","mobBackground","tabBackground","descBackground","SignUpForm"],"sourceRoot":""}